package org.project.euler;

import java.util.List;
import java.util.Map;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. 
 * So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?

 *	<a href="http://projecteuler.net/index.php?section=problems&id=12">Problem 12</a> 
 *
 * <a href="http://en.wikipedia.org/wiki/Divisor_function">Divisor Function</a>
 * 
 * @author Shekhar
 *
 */
public class PE12 {

	private static final int MAX_NUMBER_OF_DIVISOR = 500;
	
	public static void main(String[] args) {
		StopWatch stopWatch = new StopWatch().start();
		List<Integer> primeNumbers = ProjectEulerUtils.getListOfPrimeNumbersBelowAGivenNumber(100);
		int numberOfDivisors = 1;
		int triangleNumber = 1;
		for(int index = 1; numberOfDivisors < MAX_NUMBER_OF_DIVISOR;index++){
			triangleNumber = (index*(index+1))/2;
			List<Integer> primeNumbersForTriangleNumber = ProjectEulerUtils.findPrimeNumbersApplicableToNumber(primeNumbers, triangleNumber);
			Map<Integer, Integer> primeNumberWithPowers = ProjectEulerUtils.findPowerOfPrimeNumber(triangleNumber,primeNumbersForTriangleNumber);
			numberOfDivisors = ProjectEulerUtils.calculateNumberOfDivisors(primeNumberWithPowers);
		}
		System.out.println("Triangle Number "+triangleNumber +" Number of divisors "+numberOfDivisors);
		stopWatch.stop().getElapsedTime();
	}

	

	
}
